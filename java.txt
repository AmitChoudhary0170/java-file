import java.io.IOException;
import java.util.*;
import java.util.AbstractMap.SimpleEntry;
import java.util.Map.Entry;

import org.apache.hadoop.fs.Path;
import org.apache.hadoop.conf.*;
import org.apache.hadoop.io.*;
import org.apache.hadoop.mapreduce.*;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.TexInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;

public class MatrixMultiplication {


    public static class Map extends Mapper<LongWritable, Text, Text, Text> {
        public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
            Configuration conf = context.getConfiguration();

            /*
            * Row column Configuration
            */

            int m = Integer.parseInt(conf.get("m"));
            int p = Integer.parseInt(conf.get("p"));
            int s = Integer.parseInt(conf.get("s"));
            int t = Integer.parseInt(conf.get("t"));
            int v = Integer.parseInt(conf.get("v"));

            int mPerS=m/s;//Number of blocks in each column of A.
            int pPerV=p/v;//Number of blocks in each row of B.


            String line = value.toString();
            String[]indicesAndValue = line.split(",");
            Text outputKey = new Text();
            Text outputValue = new Text();


            if(indicesAndValue[0].equals("A")) {
                int i = Integer.parseInt(indicesAndValue[1]);
                int j = Integer.parseInt(indicesAndValue[2]);
                for (int kPerV=0; kPerV <pPerV; kPerV++) {
                    outputKey.set("A," + Integer.toString(i%s) + "," + Integer.toString(j%t) + indicesAndValue[3]);
                    context.write(outputKey,outputValue);
                }
                } else {
                    int j
                }
            }
        }
    }
}